{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww15080\viewh13020\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \

\b Answer to 1(b):\

\b0 \
Fragment 1:\
output is\
\

\f1  Apples: ****\
Bananas: **\
Oranges: *****
\f0 \
\
Fragment 2:\
output is\
\

\f1 Chocolate: !!!!!!!!!!\
   Onions: !!!\
unlabeled: \
unlabeled: 
\f0 \
\
Fragment 3:\
fails due to incorrect call to constructor: the required parameter numCategories is missing\
\
Fragment 4:\
fails due to an array out of bounds error: number of categories are 2, so therefore the indexes are 0 and 1,  but an attempt is made to access element 2 of the arrays\
\
\

\b Answer to Q2:
\b0 \
\

\f1 class CumulativeHistogram extends Histogram \{\
\
  public CumulativeHistogram(int numCategories)\{\
     super(numCategories); \
  \}\
  \
  public String toString() \{\
    String result = "";\
    int sum=0;\
    for (int index=0; index<categories.length; index++) \{\
      result+=categories[index]+": ";\
      sum+=frequencies[ index ];\
      result+=repeatSymbol(sum);\
      result+="\\n";\
    \}\
    return result;\
  \}\
\}
\f0 \
\

\b Answer to Q4b:\

\b0 \
Fragment 1:\

\f1 a sportscar drives\

\f0 \
Fragment 2: fails because it tries to create an object from an abstract class\
\
Fragment 3:\

\f1 a bike is ridden
\f0 \
\
Fragment 4:\

\f1 a bike is ridden
\f0 \
\
Fragement 5:\

\f1 sporty's top speed is 210.0
\f0 \
\
Fragment 6: fails because reference type Car does not have field topSpeed\
\
Fragment 7:\

\f1 sporty3's top speed is 250.0
\f0 \
\
Fragment 8:\

\f1 a minivan drives
\f0 \
\
Fragment 9: fails due to van3 being null when attempt to call drive() method is made\
\
Fragment 10:\

\f1 a minivan drives\
van4's make = Toyota\
a minivan drives
\f0 \
\
\

\b Answer to Q5:
\b0 \
\
A good set of test cases is\
\
\'93Normal\'94 cases, where there are no incorrect parameters, e.g.\

\f1 randomPattern(4,5);\
randomPattern(6,2);\
randomPattern(100,100);
\f0 \
etc\
\
\'93Error\'94 cases where your would expect to get an error.\
Note that in this example, either one or both of the parameters may be wrong therefore you should test each combination\

\f1 // First parameter correct, second one wrong\
randomPattern(23,-5);\
randomPattern(3,-100);\
// First parameter incorrect, second one correct\
randomPattern(-22,12);\
randomPattern(-4,47);\
// Both parameters wrong\
randomPattern(-55,-292);\
randomPattern(-10,-8);
\f0 \
\
\'93Boundary cases\'94 which sit at the border between correct/error cases, e.g.\

\f1 randomPattern(0,0);\
randomPattern(-1,0);\
randomPattern(0,-1);\
randomPattern(-1,-1);
\f0 \
\
\

\b Answer to Q6:
\b0 \
\
In the first code fragment, only one object is created but there are two references to the object. In the second code fragment, two objects are created (the second being a copy of the first) and each has its own reference.\
\

\b Answer to Q7:
\b0 \
\
(a) super(x,y) calls MyVector\'92s superclass\'92 constructor, passing it parameters x and y. No fields x and y are needed in MyVector because they are inherited from Vector.\
\
(b) \'93this.q\'94 refers specifically to the field q of the current object; \'93q\'94  may refer either to a field or a local variable\
\
(c) Yes it will run\
\
(d) The dist() method is inherited from the PVector class and it is this method that is called\
\
(e) It will work because MyVector inherits from PVector, and therefore by polymorphism the object \'93yours\'94 can pretend to be a PVector even though its class is MyVector\
\
\
 \
\
\
\
\
}